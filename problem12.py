#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Project Euler Problem 12:

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 +
3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

# Use a generator to make triangle numbers, count divisors with a modified prime-checking function

import math

def triangle_numbers():
  triangle = 1
  n = 1
  while True:
    yield triangle
    n += 1
    triangle += n

def count_divisors(n):
  count = 0
  sqrt = math.sqrt(n)
  
  for i in range(1, int(sqrt)): # exclude square root, which will be dealt with later
    if n % i == 0:
      # there's this divisor and also n / i
      count += 2
  
  # perfect squares have a divisor whose counterpart is itself, hence only add 1 to the count
  if sqrt.is_integer():
    count += 1
  
  return count

first_with_500 = next(n for n in triangle_numbers() if count_divisors(n) > 500)
print(first_with_500)
