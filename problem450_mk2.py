#!/usr/bin/env python
# -*- coding: utf-8 -*-

from sympy.ntheory import factorint
print('Sympy loaded')

def phi(R, factors):
  prod = R
  for p in factors:
    prod *= 1 - 1/p
  return round(prod)

def psi(factors):
  prod = 1
  for p in factors:
    prod *= 1 - p
  return prod

def triangle(n):
  return n*(n+1)//2

# Complete for up to N=10^6
special_lookup = {
  (5, 2): 560,
  (5, 3): 2912,
  (5, 4): 28000,
  (5, 5): 175000,
  (5, 6): 1050000,
  (5, 7): 6607552,
  (13, 2): 3536,
  (13, 3): 59296,
  (13, 4): 1195168,
  (17, 2): 6256,
  (17, 3): 124384,
  (17, 4): 3615968,
  (25, 2): 13108,
  (25, 3): 453344,
  (29, 2): 19024,
  (29, 3): 552352,
  (37, 2): 28596,
  (37, 3): 1427296,
  (41, 2): 35268,
  (41, 3): 2071328,
  (53, 2): 61904,
  (53, 3): 3618464,
  (61, 2): 77844,
  (61, 3): 6954592,
  (65, 2): 364292,
  (65, 3): 28711936,
  (73, 2): 120304,
  (85, 2): 622548,
  (89, 2): 169456,
  (97, 2): 212624,
  (101, 2): 213748,
  (109, 2): 263344,
  (113, 2): 265332,
  (125, 2): 1002712,
  (137, 2): 423056,
  (145, 2): 1821240,
  (149, 2): 462548,
  (157, 2): 545104,
  (169, 2): 646256,
  (173, 2): 626772,
  (181, 2): 676948,
  (185, 2): 2958488,
  (193, 2): 812144,
  (197, 2): 807732,
  (205, 2): 3659860,
  (221, 2): 4185748,
  (229, 2): 1100628,
  (233, 2): 1166864,
  (241, 2): 1268624,
  (257, 2): 1370356,
  (265, 2): 6023400,
  (269, 2): 1518884,
  (277, 2): 1626544,
  (281, 2): 1757936,
  (289, 2): 1854224,
  (293, 2): 1801876,
  (305, 2): 8129060,
  (313, 2): 2011972,
  (317, 2): 2109332,
  (325, 2): 15884284,
  (337, 2): 2496496,
  (349, 2): 2674736,
  (353, 2): 2807056,
  (365, 2): 11517000,
  (373, 2): 3145136,
  (377, 2): 12139876,
  (389, 2): 3292496,
  (397, 2): 3512656,
  (401, 2): 3318708,
  (409, 2): 3505268,
  (421, 2): 3629028,
  (425, 2): 27225260,
  (433, 2): 3910660,
  (445, 2): 17083172,
  (449, 2): 4533104,
  (457, 2): 4336016,
  (461, 2): 4728016,
  (481, 2): 19630216,
  (485, 2): 20355160,
  (493, 2): 20942344,
  (505, 2): 22255140,
  (509, 2): 5529776,
  (521, 2): 5993584,
  (533, 2): 24178744,
  (541, 2): 6587216,
  (545, 2): 25496760,
  (557, 2): 6499620,
  (565, 2): 27958660,
  (569, 2): 6837104,
  (577, 2): 6843252,
  (593, 2): 7903504,
  (601, 2): 7606256,
  (613, 2): 7667412,
  (617, 2): 7955012,
  (625, 2): 25505300,
  (629, 2): 34031112,
  (641, 2): 8595028,
  (653, 2): 9267376,
  (661, 2): 9402064,
  (673, 2): 10089616,
  (677, 2): 9404916,
  (685, 2): 40499800,
  (689, 2): 40896932,
  (697, 2): 41866344,
  (701, 2): 10217776,
}

def T(N):
  base = 0
  for R in range(3, N+1):
    factors = factorint(R)
    n = N // R
    
    phir = phi(R, factors)
    
    t = 2*R*phir
    
    if R % 4 != 0:
      residue = R % 4
      if residue == 3:
        residue = 1
      
      sum_coprimes = (R*phir - residue*psi(factors)) // 8
      
      if R % 2 == 0:
        t -= 4*sum_coprimes
      else:
        t -= 2*sum_coprimes
    
    #print(R, triangle(n) * t)
    
    base += triangle(n) * t
  
  special = 0
  for (c, degree), add in special_lookup.items():
    min_R = (degree+1)*c**degree
    
    mul = 1
    R = min_R
    
    #this_total = 0
    
    while R <= N:
      special += mul*add
    #  this_total += mul*add
    #  print('Applied c={}, degree={} at R={}'.format(c, degree, R))
      mul += 1
      R = mul*min_R
    
    #if this_total:
    #  print('c={}, degree={}: {}'.format(c, degree, this_total))
  
  # lone 7/25
  min_R = 625
  add = 4236
  
  #this_total = 0
  
  mul = 1
  R = min_R
  while R <= N:
    special += mul*add
    #this_total += mul*add
    mul += 1
    R = mul*min_R
  
  #print('Lone 7/25:', this_total)
  
  #print(base, special)
  return base + special

print(T(1000000))

# from math import gcd, ceil
# for R in range(3, 51):
#   sc1 = sum(r for r in range(1, ceil(R/2)) if gcd(R, r) == 1)
  
#   d = R % 4
#   if d == 3:
#     d = 1
  
#   sc2 = (R * phi(R) - d * psi(R)) // 8
  
#   print(R, sc1, sc2)
