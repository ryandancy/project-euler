#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Project Euler Problem 94:

It is easily proved that no equilateral triangle exists with integral length sides and integral area. However, the
almost equilateral triangle 5-5-6 has an area of 12 square units.

We shall define an almost equilateral triangle to be a triangle for which two sides are equal and the third differs by
no more than one unit.

Find the sum of the perimeters of all almost equilateral triangles with integral side lengths and area and whose
perimeters do not exceed one billion (1,000,000,000).
"""

'''
An "almost equilateral triangle" with integral perimeter and area is composed of two congruent right-angled triangles
with side lengths forming a Pythagorean triple (a, b, c) (with a < b < c) where |2a - c| = 1.

In the tree of Pythagorean triples, all primitive Pythagorean triples may be generated by starting with the column
column [3, 4, 5]^T, then multiplying on the left by one of the following matrices (in Numpy format):

A = [[ 1, -2,  2],    B = [[1, 2, 2],    C = [[-1,  2,  2],
     [ 2, -1,  2],         [2, 1, 2],         [-2,  1,  2],
     [ 2, -2,  3]]         [2, 2, 3]]         [-2,  2,  3]]

It turns out that if one multiplies [3, 4, 5]^T by C, then A, then C, repeatedly, then the generated Pythagorean triples
are exactly the triples where |2a - c| = 1.

The solution using this runs in ~0.3 seconds.
'''

import numpy as np

LIMIT = 10**9

A = np.mat('1 -2 2; 2 -1 2; 2 -2 3')
C = np.mat('-1 2 2; -2 1 2; -2 2 3')

current = np.mat('3; 4; 5')
useA = False
total = 0

while True:
  prim_arr = np.squeeze(np.asarray(current))
  a, b, c = map(int, sorted(prim_arr))
  
  perim = 2*a + 2*c
  if perim > LIMIT:
    break
  
  total += perim
  
  current = (A if useA else C) * current
  useA = not useA

print(total)
