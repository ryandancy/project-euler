#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Project Euler Problem 44:

Pentagonal numbers are generated by the formula, P(n)=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P(4) + P(7) = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P(j) and P(k), for which their sum and difference are pentagonal and D = |P(k)
− P(j)| is minimised; what is the value of D?
"""

# P(n+1) - P(n) = 3n + 1
# Using this, generate adjacent differences, sum them, and check for the pentagonal properties
# Runs in ~6.5 minutes 

from math import sqrt
from itertools import count
from collections import defaultdict
import sys

memoized = {}
def is_pentagonal(n):
  # derived with the quadratic formula
  if n not in memoized:
    memoized[n] = sqrt(1 + 24*n) % 6 == 5
  return memoized[n]

def generate_differences():
  for n in count(2):
    for i in range(n - 1, 0, -1):
      # Formula for the sequence of first differences is D(n) = 3n + 1
      yield tuple(map(lambda x: 3*x + 1, range(i, n)))

def find_lowest_diff():
  lowest = 10**100
  found_one = False
  
  for differences in generate_differences():
    lo_diff, hi_diff = differences[0], differences[-1]
    diff = sum(differences)
    
    if found_one and lo_diff == hi_diff:
      # only 1 diff generated; final combo for this difference
      return lowest
    
    if not is_pentagonal(diff):
      continue
    
    lo = (lo_diff**2 - 3*lo_diff + 2) // 6
    hi = (hi_diff**2 + 3*hi_diff + 2) // 6
    
    if not is_pentagonal(lo + hi):
      continue
    
    found_one = True
    if diff < lowest:
      lowest = diff

print(find_lowest_diff())
