#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Project Euler Problem 101:

If we are presented with the first k terms of a sequence it is impossible to say with certainty the value of the next
term, as there are infinitely many polynomial functions that can model the sequence.

As an example, let us consider the sequence of cube numbers. This is defined by the generating function,
u(n) = n^3: 1, 8, 27, 64, 125, 216, ...

Suppose we were only given the first two terms of this sequence. Working on the principle that "simple is best" we
should assume a linear relationship and predict the next term to be 15 (common difference 7). Even if we were presented
with the first three terms, by the same principle of simplicity, a quadratic relationship should be assumed.

We shall define OP(k, n) to be the nth term of the optimum polynomial generating function for the first k terms of a
sequence. It should be clear that OP(k, n) will accurately generate the terms of the sequence for n ≤ k, and potentially
the first incorrect term (FIT) will be OP(k, k+1); in which case we shall call it a bad OP (BOP).

As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is,
for n ≥ 2, OP(1, n) = u(1).

Hence we obtain the following OPs for the cubic sequence:

OP(1, n) = 1          1, 1, 1, 1, ...
OP(2, n) = 7n−6       1, 8, 15, ...
OP(3, n) = 6n^2−11n+6 1, 8, 27, 58, ...
OP(4, n) = n^3        1, 8, 27, 64, 125, ...
Clearly no BOPs exist for k ≥ 4.

By considering the sum of FITs generated by the BOPs (indicated in red above), we obtain 1 + 15 + 58 = 74.

Consider the following tenth degree polynomial generating function:

u(n) = 1 − n + n^2 − n^3 + n^4 − n^5 + n^6 − n^7 + n^8 − n^9 + n^10

Find the sum of FITs for the BOPs.
"""

# For a polynomial of degree n, no BOPs exist for k >= n + 1

# For a polynomial of degree n where u(1) through u(n+1) is given,
#  u(k) = u(k-1) + delta(k-2) + delta^2 u(k-3) + ... + delta^(n-1) u(k-n) + delta^n u(k-n-1)
# where delta^m u(n) = delta^(m-1) u(n+1) - delta^(m-1) u(n) and delta^0 u(n) = u(n)
# Note that delta^n u(k) is constant for any k in a polynomial of degree n

from itertools import count, islice

def delta(seq, n, delta_degree):
  if delta_degree <= 0:
    return seq[n - 1]
  else:
    return delta(seq, n + 1, delta_degree - 1) - delta(seq, n, delta_degree - 1)

def gen_op(seq):
  degree = len(seq) - 1
  delta_n = delta(seq, 1, degree) # constant
  
  while True:
    k = len(seq) + 1
    prediction = delta_n
    
    for m in range(degree):
      prediction += delta(seq, k - m - 1, m)
    
    seq.append(prediction)
    yield prediction

def gen_polynomial(values, start=1):
  # values is a list where the index is the exponent and the value is the coefficient
  # e.g. if values == [2, 1, 6, 2, 0, 1], the polynomial is 2 + x + 6x^2 + 2x^3 + x^5
  for n in count(start):
    yield sum(coefficient * n**exponent for exponent, coefficient in enumerate(values))

seq = list(islice(gen_polynomial([1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]), 10))
print(sum(next(gen_op(seq[:n])) for n in range(1, 11)))
